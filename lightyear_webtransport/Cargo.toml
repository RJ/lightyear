[package]
name = "lightyear_webtransport"
version.workspace = true
authors = ["aecsocket <aecsocket@tutanota.com>"]
edition.workspace = true
rust-version.workspace = true
license.workspace = true
description = "IO primitives for the lightyear networking library"
repository = "https://github.com/cBournhonesque/lightyear"

[lints]
workspace = true

[package.metadata.docs.rs]
all-features = true
rustflags    = ["--cfg=web_sys_unstable_apis"]
targets      = ["x86_64-unknown-linux-gnu", "wasm32-unknown-unknown"]

[features]
default = ["self-signed"]
client = ["aeronet_webtransport/client"]
server = ["aeronet_webtransport/server"]

## Enables `wtransport/self-signed`, allowing you to generate self-signed certificates easily for
## use in a server.
##
## Note that, without explicitly allowing your server's self-signed certificate (or using
## `dangerous-configuration` and disabling certificate validation), clients will not be able to
## connect to a server with self-signed certificates.
self-signed = ["aeronet_webtransport/self-signed"]

## Enables `wtransport/dangerous-configuration`, allowing you to use potentially dangerous
## certificate validation configurations.
##
## You should not use dangerous configurations in production builds of your app.
dangerous-configuration = ["aeronet_webtransport/dangerous-configuration"]

[dependencies]
aeronet_webtransport.workspace = true
aeronet_io.workspace = true
lightyear_connection.workspace = true
lightyear_link.workspace = true

anyhow            = { workspace = true }
base64            = { workspace = true }
bevy_app          = { workspace = true }
bevy_ecs          = { workspace = true }
bevy_platform     = { workspace = true }
bevy_reflect      = { workspace = true }
bevy_time       = { workspace = true }
bytes             = { workspace = true }
cfg-if            = { workspace = true }
document-features = { workspace = true, optional = true }
futures           = { workspace = true }
thiserror.workspace = true
tracing           = { workspace = true }
xwt-core          = { workspace = true }


derive_more = { workspace = true, features = [
  "display",
  "error",
  "deref",
  "deref_mut",
] }

[target.'cfg(target_family = "wasm")'.dependencies]
gloo-timers          = { workspace = true, features = ["futures"] }
js-sys               = { workspace = true }
wasm-bindgen         = { workspace = true }
wasm-bindgen-futures = { workspace = true }
xwt-web              = { workspace = true }

[target.'cfg(not(target_family = "wasm"))'.dependencies]
spki           = { workspace = true, features = ["fingerprint"] }
tokio          = { workspace = true, features = ["rt-multi-thread"] }
wtransport     = { workspace = true }
x509-cert      = { workspace = true }
xwt-wtransport = { workspace = true }

[dev-dependencies]
bevy      = { workspace = true }
bevy_egui = { workspace = true }